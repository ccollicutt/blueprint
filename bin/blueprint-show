#!/usr/bin/python

import errno
import logging
import optparse
import re
import sys

import blueprint

parser = optparse.OptionParser('Usage: %prog [-P|-C|-S] [-q] <name>')
parser.add_option('-P', '--puppet',
                  dest='generate',
                  action='store_const',
                  const='puppet',
                  help='generate a Puppet module')
parser.add_option('-C', '--chef',
                  dest='generate',
                  action='store_const',
                  const='chef',
                  help='generate a Chef cookbook')
parser.add_option('-S', '--sh',
                  dest='generate',
                  action='store_const',
                  const='sh',
                  help='generate POSIX shell code')
parser.add_option('-q', '--quiet',
                  dest='quiet',
                  default=False,
                  action='store_true',
                  help='operate quietly')
(options, args) = parser.parse_args()

if options.quiet:
    logging.root.setLevel(logging.CRITICAL)

if 1 != len(args):
    parser.print_usage()
    sys.exit(1)
if re.search(r'[/ \t\r\n]', args[0]):
    logging.error('invalid blueprint name')
    sys.exit(1)
name = args[0]

try:
    b = blueprint.Blueprint(name=name)
except KeyError:
    logging.error('blueprint %s does not exist' % (name))
    sys.exit(1)

if options.generate is None:
    print(b.dumps())
else:
    try:
        filename = getattr(b, options.generate)().dumpf()
    except OSError, e:
        if errno.EEXIST == e.errno:
            logging.error('%s already exists' % (name))
        sys.exit(1)
    if not options.quiet:
        print(filename)
